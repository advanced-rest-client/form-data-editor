/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   form-data-editor.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/elements/dom-repeat.d.ts" />
/// <reference path="../polymer/types/lib/elements/dom-if.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../iron-form/iron-form.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../payload-parser-behavior/payload-parser-behavior.d.ts" />
/// <reference path="../iron-validatable-behavior/iron-validatable-behavior.d.ts" />
/// <reference path="../paper-checkbox/paper-checkbox.d.ts" />
/// <reference path="../api-form-mixin/api-form-mixin.d.ts" />
/// <reference path="../api-form-mixin/api-form-styles.d.ts" />
/// <reference path="form-data-editor-item.d.ts" />

/**
 * An element to edit form data (x-www-form-urlencoded).
 *
 * Empty values for both name and value inputs are not included in final body value.
 *
 * The element can work as a simple body creation element. Set `allow-custom`
 * to allow the user to add a parameter that hasn been predefined.
 *
 * ```html
 * <form-data-editor allow-custom></form-data-editor>
 * ```
 *
 * The element works with `advanced-rest-client/api-view-model-transformer`
 * that can create view model from default of from AMF json/ld model.
 * [AMF](https://github.com/mulesoft/amf) allows to transform RAML or OAS
 * specification of an API to a common model. The transformer generates
 * view model from api spec. If `allow-custom` is not set, the element
 * allows to define values only for properties defined in the model.
 *
 * ```html
 * <form-data-editor model="[...]"></form-data-editor>
 * ```
 *
 * The element allows to disable form item on the list so the user can
 * remove a property from the generated value without removing it from the
 * form. Use `allow-disable-params` to enable this feature.
 *
 * ```html
 * <form-data-editor allow-disable-params></form-data-editor>
 * ```
 *
 * ### Styling
 *
 * `<form-data-editor>` provides the following custom properties and mixins for styling:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--form-data-editor` | Mixin applied to the element | `{}`
 * `--form-data-editor-encode-buttons` | Mixin applied to encode / decode buttons container | `{}`
 *
 * Properies included in `form-data-editor-item`:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--form-data-editor-item` | Mixin applied to the element | `{}`
 * `--api-form-name-input` | Mixin applied to custom item name input field | `{}`
 * `--api-form-name-input-narrow` | Mixin applied to custom item name input field when narrow | `{}`
 *
 * Properies inheritet from `api-form-styles`
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--api-form-row` | Mixin applied to API form rows. Each row already applies `--layout-horizontal` and `--layout-start` | `{}`
 * `--api-form-row-narrow` | Mixin applied to API form rows when `narrow` property is set | `{}`
 * `--api-form-row-optional` | Mixin applied to optional row of the form (not required). By default this form row is hidden from the view | `{}`
 * `--api-form-row-optional-visible` | Mixin applied to optional row of the form when it becomes visible | `{}`
 * `--api-form-action-button-color` | Color of the action button in the form. Action buttons should perform form's primary actions like "submit" or "add new". Use `--api-form-action-icon-*` for icons related styling | `--secondary-button-color` or `--accent-color`
 * `--api-form-action-button-background-color` | Similar to `--api-form-action-button-color` but it's background color | `--secondary-button-background`
 * `--secondary-button` | Mixin applied to the action button. This is more general theme element. This values can be overriten by `--api-form-action-button` | `{}`
 * `--api-form-action-button` | Mixin applied to the action button | `{}`
 * `--api-form-action-button-hover-color` | Color of the action button in the form when hovering. | `--secondary-button-color` or `--accent-color`
 * `--api-form-action-button-hover-background-color` | Similar to `--api-form-action-button-hover-color` but it's background color | `--secondary-button-background`
 * `--secondary-button-hover` | Mixin applied to the action button when hovered. This is more general theme element. This values can be overriten by `--api-form-action-button` | `{}`
 * `--api-form-action-button-hover` | Mixin applied to the action button when hovered. | `{}`
 * `--hint-trigger-color` | Color of the form action icon button to dispay documentation for the item. | `rgba(0, 0, 0, 0.74)`
 * `--icon-button` | Mixin applied to the icon button to dispay documentation for the item | `{}`
 * `--hint-trigger-hover-color` | Color of the form action icon button to dispay documentation for the item when hovered | `rgba(0, 0, 0, 0.74)`
 * `--icon-button-hover` | Mixin applied to the icon button to dispay documentation for the item when hovered | `{}`
 * `--api-form-action-icon-color` | Color of any other than documentation icon button in form row | `--icon-button-color` or `rgba(0, 0, 0, 0.74)`
 * `--api-form-action-icon-hover-color` | Color of any other than documentation icon button in form row when hovering | `--accent-color` or `rgba(0, 0, 0, 0.88)`
 * `--inline-documentation-background-color` | Background color of the documentation element. | `#FFF3E0`
 * `--inline-documentation-color` | Color of the documentation element | `rgba(0, 0, 0, 0.87)`
 * `--inline-documentation-font-size` | Font size of the documentaiton element | `13px`
 */
declare class FormDataEditor extends
  Polymer.IronValidatableBehavior(
  ArcBehaviors.ApiFormMixin(
  ArcBehaviors.PayloadParserBehavior(
  Object))) {
  value: string|null|undefined;

  /**
   * Appends an empty header to the list.
   */
  add(): void;
  _modelChanged(record: any): void;

  /**
   * Encode payload button press handler
   */
  _encodePaylod(): void;

  /**
   * Decode payload button press handler
   */
  _decodePaylod(): void;

  /**
   * Computes for item class.
   *
   * @param item Model for form item
   */
  _computeItemClass(item: object|null, narrow: Boolean|null, allowHideOptional: Boolean|null, optionalOpened: Boolean|null, allowDisableParams: Boolean|null): String|null;

  /**
   * Updates the value when model changes.
   *
   * @param model Current model
   */
  _updateValue(model: any[]|null): void;

  /**
   * Updates the model from value, if not cause by internal setters.
   */
  _valueChanged(value: String|null): void;

  /**
   * Creates a model item from parser's name => value pairs.
   *
   * @param param Object with `value` and `name` properties.
   */
  _paramToModel(param: object|null): void;
}

interface HTMLElementTagNameMap {
  "form-data-editor": FormDataEditor;
}
