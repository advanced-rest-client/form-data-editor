/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   form-data-editor-item.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

declare namespace UiElements {

  /**
   * An element that renders form controls for the editor.
   */
  class FormDataEditorItem extends LitElement {

    /**
     * The name of this element.
     */
    name: string|null|undefined;

    /**
     * The value of this element.
     */
    value: string|null|undefined;

    /**
     * A model item
     */
    model: object|null|undefined;

    /**
     * If set it renders a narrow layout
     */
    narrow: boolean|null|undefined;

    /**
     * True to render documentation (if set in model)
     */
    docsOpened: boolean|null|undefined;

    /**
     * Set if the header is not specified in the RAML type (is a custom
     * header).
     */
    isCustom: boolean|null|undefined;

    /**
     * If set it is render the item control as an array item (adds more
     * spacing to the element)
     */
    isArray: boolean|null|undefined;

    /**
     * Prohibits rendering of the documentation (the icon and the
     * description).
     */
    noDocs: boolean|null|undefined;

    /**
     * Enables Anypoint legacy styling
     */
    legacy: boolean|null|undefined;

    /**
     * Enables Material Design outlined style
     */
    outlined: boolean|null|undefined;

    /**
     * When set the editor is in read only mode.
     */
    readOnly: boolean|null|undefined;

    /**
     * When set all controls are disabled in the form
     */
    disabled: boolean|null|undefined;

    /**
     * When set a model generated item is maked as required.
     */
    required: boolean|null|undefined;
    constructor();
    render(): any;
    _customTemplate(): any;
    _modelTemplate(model: any, hasDocs: any, noDocs: any): any;

    /**
     * Dispatches `remove` custom event that does not bubbles to inform the editor
     * to delete this parameter.
     */
    _remove(): void;

    /**
     * Computes documentation as a markdown to be placed in the `marked-element`
     *
     * @param item View model
     */
    _computeDocumentation(item: object|null): String|null;

    /**
     * Computes if model item has documentation to display.
     *
     * @param noDocs If set it always cancels docs
     * @param item Model item
     * @returns True if documentation can be rendered.
     */
    _computeHasDocumentation(noDocs: Boolean|null, item: object|null): Boolean|null;
    _valueChangeHandler(e: any): void;
    _nameChangeHandler(e: any): void;
    _toggleItemDocs(): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "form-data-editor-item": UiElements.FormDataEditorItem;
  }
}
